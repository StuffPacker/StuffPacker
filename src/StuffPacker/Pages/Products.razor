@page "/products"
@using Microsoft.AspNetCore.Http;
@using System.Linq
@using StuffPacker.store.UserProduct
@inject IHttpContextAccessor _httpContextAccessor;
@inject IProductService _productService;
@inject IState<UserProductsDataState> ProductsDataState
@inject IDispatcher Dispatcher
@attribute [Authorize]
<h1>Products</h1>
@if (ProductsDataState.Value.CategoryList == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="container-fluid">
        <div class="row">
            @foreach (var item in ProductsDataState.Value.CategoryList)
            {
                <div class="col-12">
                    @if (item.Maximized)
                    {
                        <h4>

                            @if (string.IsNullOrEmpty(item.Name))
                            {
                                <b>Uncategorized</b>
                            }
                            else
                            {
                                <MatButton Icon="keyboard_arrow_up" Style="color:black;" OnClick="@(e=>ExpandCollapse(item.Name))" Label=""></MatButton>
                                @item.Name
                            }

                        </h4>
                        <table class="table table-striped">
                            <thead class="thead-dark">
                                <tr>
                                    <th>Name</th>
                                    <th>Description</th>
                                    <th>Amount</th>
                                    <th>Weight</th>
                                    <th>Info</th>
                                    <th></th>
                                </tr>
                            </thead>
                            @foreach (var context in ProductsDataState.Value.ProductList.Where(x => x.Category == item.Name).ToList())
                            {
                                <tr>
                                    <td>@context.Name</td>
                                    <td>@context.Description</td>
                                    <th>@context.Amount</th>
                                    <td>@context.WeightAndTokenShort</td>
                                    <td>
                                        @if (context.Star)
                                        {
                                            <MatIcon Class=".sp-mdc-button" Style="color:#ff6a00;" Attributes="@(new Dictionary<string, object>() { {"title","Favorite" } })" Icon="star"></MatIcon>
                                        }
                                        @if (context.Wearable)
                                        {
                                            <MatIcon Class=".sp-mdc-button" Style="color:darkgreen;" Attributes="@(new Dictionary<string, object>() { {"title","Wearable" } })" Icon="accessibility_new"></MatIcon>
                                        }
                                        @if (context.Consumables)
                                        {
                                            <MatIcon Class=".sp-mdc-button" Style="color:darkgreen;" Attributes="@(new Dictionary<string, object>() { {"title","Consumables" } })" Icon="fastfood"></MatIcon>
                                        }
                                    </td>
                                    <td>
                                        <MatButton Icon="edit" Style="color:burlywood;" OnClick="@(e => EditProduct(context.Id))" Label=""></MatButton>
                                        <MatIconButton Icon="delete" OnClick="@((e) => {
                                                                        confirmModel.DialogIsOpen = true;
                                                                        confirmModel.Header = $"Are you sure you want to delete {context.Name}?";
                                                                        confirmModel.OkButtonText = "Delete";
                                                                        confirmModel.OnOkClick = async () => await DeleteProduct(context.Id);
                                                                    })"></MatIconButton>
                                    </td>
                                </tr>
                            }

                        </table>
                    }
                    else
                    {
                        <div style="background-color:lightgray;">
                            <h4>
                                <MatButton Icon="keyboard_arrow_down" Style="color:black;" OnClick="@(e=>ExpandCollapse(item.Name))" Label=""></MatButton>
                                @item.Name
                            </h4>
                        </div>
                    }
                </div>
            }
        </div>
    </div>
}
<StuffPacker.Components.BaseComponents.ConfirmComponent Model="confirmModel" />
<StuffPacker.Components.PackListComponents.ProductUpdateComponent Model="productUpdateComponentViewModel" WeightPrefixes="weightPrefix" OnAfterOkClick="ClickHandler" />


@code {
    ConfirmComponentViewModel confirmModel = new ConfirmComponentViewModel();
  // List<ProductViewModel> ProductList;
    ProductUpdateComponentViewModel productUpdateComponentViewModel = new ProductUpdateComponentViewModel();
    List<string> weightPrefix = new List<string>();
  //  List<ProductListCategoryViewModel> CategoryList = new List<ProductListCategoryViewModel>();


    protected override async Task OnInitializedAsync()
    {

        weightPrefix = WeightPrefixHelper.GetWeightPrefix();
        ProductsDataState.Subscribe(this);
        Dispatcher.Dispatch(new GetUserProductsDataAction());


    }

    async Task LoadList()
    {





        //var productGroups = (await _productService.GetProductGroups()).ToList();
        //var products = await this._productService.GetById();
        //productGroups.Add(new ProductListCategoryViewModel { Name = "" });
        //CategoryList = (productGroups).ToList();

        //ProductList = (products).ToList();



    }

    async Task ExpandCollapse(string name)
    {
        var item = ProductsDataState.Value.CategoryList.First(x => x.Name == name);

        item.Id = await _productService.UpsertProductGroupsExpandCollapse(item.Id, !item.Maximized, name);


        item.Maximized = !item.Maximized;
    }

    private Guid GetUserId()
    {
        var userId = Guid.Parse(_httpContextAccessor.HttpContext.User.FindFirst(ClaimTypes.NameIdentifier).Value);
        return userId;
    }
    async Task<string> DeleteProduct(Guid id)
    {
        var model = ProductsDataState.Value.ProductList.Find(x => x.Id == id);
        await this._productService.Delete(id);
        //ProductsDataState.ValueProductList.Remove(model);
        //base.StateHasChanged();
        return "";
    }


    async Task EditProduct(Guid productId)
    {

        var product = ProductsDataState.Value.ProductList.First(x => x.Id == productId);
        productUpdateComponentViewModel.EditMode = true;
        productUpdateComponentViewModel.ConvertedWeight = product.ConvertedWeight;
        productUpdateComponentViewModel.WeightPrefixValue = product.WeightPrefix.ToString();
        productUpdateComponentViewModel.ProductModel = product;
        productUpdateComponentViewModel.DialogIsOpen = true;
    }

    async Task ClickHandler(string newMessage)
    {

        //    await LoadList();
        //    StateHasChanged();

    }
}
