@page "/products"
@using Microsoft.AspNetCore.Http;
@inject IHttpContextAccessor _httpContextAccessor;
@inject IProductService _productService;
@attribute [Authorize]
<h1>Products</h1>
@if (ProductList == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="container-fluid">
        <div class="row">
            @foreach (var item in CategoryList)
            {
            <div class="col-12">
                @if (item.Maximized)
                {
                    <h4>
                        <MatButton Icon="keyboard_arrow_up" Style="color:black;" OnClick="@(e=>ExpandColaps(item.Name))" Label=""></MatButton>
                        @item.Name
                    </h4>
                    <table class="table table-striped">
                        <thead class="thead-dark">
                            <tr>
                                <th>Name</th>
                                <th>Weight</th>
                                <th></th>
                            </tr>
                        </thead>
                        @foreach (var context in ProductList.Where(x => x.Category == item.Name).ToList())
                        {
                            <tr>
                                <td>@context.Name</td>
                                <td>@context.WeightAndToken</td>
                                <td>
                                    <MatButton Icon="edit" Style="color:burlywood;" OnClick="@(e => EditProduct(context.Id))" Label=""></MatButton>
                                    <MatIconButton Icon="delete" OnClick="@((e) => {
                                                                        confirmModel.DialogIsOpen = true;
                                                                        confirmModel.Header = $"Are you sure you want to delete {context.Name}?";
                                                                        confirmModel.OkButtonText = "Delete";
                                                                        confirmModel.OnOkClick = async () => await DeleteProduct(context.Id);
                                                                    })"></MatIconButton>
                                </td>
                            </tr>
                        }

                    </table>
                }
                else
                {
                    <div style="background-color:lightgray;">
                        <h4>
                            <MatButton Icon="keyboard_arrow_down" Style="color:black;" OnClick="@(e=>ExpandColaps(item.Name))" Label=""></MatButton>
                            @item.Name
                        </h4>
                    </div>
                }
            </div>
            }
        </div>
        </div>
}
<StuffPacker.Components.BaseComponents.ConfirmComponent Model="confirmModel" />
<StuffPacker.Components.PackListComponents.ProductUpdateComponent Model="productUpdateComponentViewModel" WeightPrefixes="weightPrefix" OnAfterOkClick="ClickHandler" />


@code {
    ConfirmComponentViewModel confirmModel = new ConfirmComponentViewModel();
    List<ProductViewModel> ProductList;
    ProductUpdateComponentViewModel productUpdateComponentViewModel = new ProductUpdateComponentViewModel();
    List<string> weightPrefix = new List<string>();
    List<ProductListCategoryViewModel> CategoryList = new List<ProductListCategoryViewModel>();


    protected override async Task OnInitializedAsync()
    {

        weightPrefix = WeightPrefixHelper.GetWeightPrefix();
        await LoadList();


    }

    async Task LoadList()
    {
        ProductList = (await this._productService.GetById()).ToList();
        var list = new List<ProductListCategoryViewModel>();
        var t = ProductList.Select(s => s.Category).Distinct();
        foreach (var item in t)
        {
            list.Add(new ProductListCategoryViewModel { Name=item});
        }
        CategoryList = list;
    }

    void ExpandColaps(string name)
    {
        var item = CategoryList.First(x=>x.Name==name);
        item.Maximized = !item.Maximized;
    }

    private Guid GetUserId()
    {
        var userId = Guid.Parse(_httpContextAccessor.HttpContext.User.FindFirst(ClaimTypes.NameIdentifier).Value);
        return userId;
    }
    async Task<string> DeleteProduct(Guid id)
    {
        var model = ProductList.Find(x => x.Id == id);
        await this._productService.Delete(id);
        ProductList.Remove(model);
        base.StateHasChanged();
        return "";
    }


    async Task EditProduct(Guid productId)
    {

        var product = ProductList.First(x => x.Id == productId);
        productUpdateComponentViewModel.EditMode = true;
        productUpdateComponentViewModel.ConvertedWeight=product.ConvertedWeight;
        productUpdateComponentViewModel.WeightPrefixValue = product.WeightPrefix.ToString();
        productUpdateComponentViewModel.ProductModel = product;     
        productUpdateComponentViewModel.DialogIsOpen = true;
    }
   
      async Task ClickHandler(string newMessage)
    {
       await LoadList();
    }
}
