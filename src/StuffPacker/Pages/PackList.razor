@page "/packlist"
@using StuffPacker.store.packlist
@using StuffPacker.store.packlist.Get
@using StuffPacker.store.UserProduct
@using Microsoft.AspNetCore.Http;
@inject IState<PackListDataState> PackListDataState
@inject IState<UserProductsDataState> ProductsDataState
@inject IDispatcher Dispatcher
@inject StuffPacker.Services.IPackListService _packListService
@inject IHttpContextAccessor _httpContextAccessor
@inject NavigationManager NavigationManager
@attribute [Authorize]
@if (PackListDataState.Value.PackLists == null)
{
    <p><em>Loading...</em></p>
}
else
{
   
    <div class="container-fluid">
        <div class="row">      
            <div class="col-12">
                <h1>Packlists</h1>
                <MatBlazor.MatButton Raised="true" OnClick=@(e => { dialogVisibleListsIsOpen = true; })>Visible packlists</MatBlazor.MatButton>
                <br />
                <MatButton Icon="add_circle" Style="color:green;" OnClick="@OpenAddDialog" Label="Add packlist"></MatButton>
            </div>
           
        </div>
        <div class="row">
            @foreach (var item in PackListDataState.Value.PackLists.Where(x=>x.Visible).ToList())
            {
                <div class="col-sm-6" style="border:solid 1px #eee">
                    <StuffPacker.Components.PackListComponents.PackListComponent Model="item" Categories="@GetCategories().ToArray()" />
                </div>
            }
        </div>
    </div>

}
<MatDialog @bind-IsOpen="@dialogVisibleListsIsOpen">
    <MatDialogTitle>Visible lists</MatDialogTitle>
    <MatDialogContent>
        <table class="table">
            <tr>
                <td>Visible</td>
                <td>Name</td>
            </tr>
            @if (PackListDataState.Value.PackLists != null)
            {
                @foreach (var item in PackListDataState.Value.PackLists)
                {
                    <tr>
                        <td><MatCheckbox @bind-Value="item.Visible"></MatCheckbox></td>
                        <td>@item.Name</td>
                    </tr>
                }
            }

        </table>
    </MatDialogContent>
    <MatDialogActions>
        <MatButton OnClick="@(e => { dialogVisibleListsIsOpen = false; })">Cancel</MatButton>
        <MatButton OnClick="@VisibleListsSaveClick">Save</MatButton>
    </MatDialogActions>
</MatDialog>
<MatDialog @bind-IsOpen="@dialogIsOpen">
    <MatDialogTitle>Add list</MatDialogTitle>
    <MatDialogContent>
        <p>Name</p>
        <MatTextField @bind-Value="@dialogListName"></MatTextField>
    </MatDialogContent>
    <MatDialogActions>
        <MatButton OnClick="@(e => { dialogIsOpen = false; })">Cancel</MatButton>
        <MatButton OnClick="@OkClick">Save</MatButton>
    </MatDialogActions>
</MatDialog>
@code {
    bool dialogVisibleListsIsOpen = false;
    bool dialogIsOpen = false;
    bool dialogInfoIsOpen = false;
    bool dialogEditMode = false;
    Guid dialogEditId;
    string dialogListName = null;

    protected override async Task OnInitializedAsync()
    {

        //if (_httpContextAccessor.HttpContext.User.FindFirst("SpAdminApiToken") == null)
        //{
        //    NavigationManager.NavigateTo("/identity/account/logout",true);
        //}



        Dispatcher.Dispatch(new GetUserProductsDataAction());
        PackListDataState.Subscribe(this);
        ProductsDataState.Subscribe(this);

    }
    async Task VisibleListsSaveClick()
    {
        var dict = new Dictionary<Guid,bool>();
        foreach (var item in PackListDataState.Value.PackLists)
        {
            dict.Add(item.Id,item.Visible);
        }
        await _packListService.UpdateVisibleList(dict);
        dialogVisibleListsIsOpen = false;
    }
    void OpenAddDialog()
    {
        dialogIsOpen = true;
        dialogEditMode = false;
        dialogListName = null;
    }
    async Task OkClick()
    {

        var id = Guid.NewGuid();
        if (dialogEditMode)
        {
            id = dialogEditId;
            var list = PackListDataState.Value.PackLists.First(x => x.Id == dialogEditId);
            list.Name = dialogListName;
            await _packListService.Update(list);
        }
        else
        {

            await this._packListService.Add(id, dialogListName, this.GetUserId());

        }
        dialogIsOpen = false;
    }
    private Guid GetUserId()
    {
        var userId = Guid.Parse(_httpContextAccessor.HttpContext.User.FindFirst(ClaimTypes.NameIdentifier).Value);
        return userId;
    }
    private List<string> GetCategories()
    {
        var list = new List<string>();
        if (ProductsDataState.Value.CategoryList == null)
        {
            return list;
        }
        foreach (var item in ProductsDataState.Value.CategoryList)
        {
            if (item.Id == Guid.Empty)
            {
                continue;
            }
            list.Add(item.Name);
        }
        return list;
    }
}
