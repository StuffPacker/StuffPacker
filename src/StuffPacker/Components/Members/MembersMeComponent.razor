@using global::Shared.Contract
@using StuffPacker.store.packlist.Get
@using StuffPacker.store.packlist
@using System.Linq
@using Enums
@inject ICurrentUserProvider _currentUserProvider
@inject IUserService _userService
@inject IState<PackListDataState> PackListDataState
@inject NavigationManager _navigationManager
@inject ICdnHelper _cdnHelper
<div class="container-fluid">
    <div class="row">
        <div class="col-md-1">
            <img alt="User Image" style="width:100%;" src="@imgUrl" />
        </div>
        <div class="col-md">            
                <MatIconButton Class=".sp-mdc-button" Icon="settings" OnClick="@UpdateUserSettings"></MatIconButton>           
           <h3>@nickName</h3>
            @fullName
        </div>
    </div>
</div>

<div class="container-fluid">
    <div class="row">
        <MemberFollowComponent Title="I´m Following" Members="@following" Following="true" NoMemberText="<p>You are not following anyone jet</p>" OnFollowChange="ReloadFollow" />
        <MemberFollowComponent Title="Following Me" Members="@followers" Following="false" NoMemberText="<p>No one is following you</p>" OnFollowChange="ReloadFollow" />
        <StuffPacker.Components.PackListComponents.PackListsReferensListComponent Lists="lists" />
    </div>
</div>


@code {
    [Parameter]
    public Guid MemberId { get; set; }


    string nickName = string.Empty;
    string fullName = string.Empty;
    string imgUrl = "/img/user.png";
    List<FollowMemberViewModel> following = new List<FollowMemberViewModel>();
    List<FollowMemberViewModel> followers = new List<FollowMemberViewModel>();

    List<PackListViewModel> lists = new List<PackListViewModel>();
    private void UpdateUserDialogOkClick()
    {

    }
    protected override async Task OnInitializedAsync()
    {
        PackListDataState.Subscribe(this);
        var userProfile = await _currentUserProvider.GetProfile();



        nickName = userProfile.NickName;
        if (nickName == "-")
        {
            nickName = "No Name!";

        }
        fullName = userProfile.FirstName + " " + userProfile.LastName;
        imgUrl = _cdnHelper.GetPath(CdnFileType.UserImage, userProfile.UserImgPath);
        following = (await _currentUserProvider.GetFollowing()).ToList();
        followers = (await _currentUserProvider.GetFollowers()).ToList();


        if (PackListDataState.Value.PackLists != null)
        {
            lists = (PackListDataState.Value.PackLists).ToList();
        }

    }
    private async Task UpdateUserSettings()
    {
        _navigationManager.NavigateTo("/member/settings");
    }
    private async Task ReloadFollow()
    {
        await this._currentUserProvider.ReloadFollowers();
        await this._currentUserProvider.ReloadFollowing();

        following = (await _currentUserProvider.GetFollowing()).ToList();
        followers = (await _currentUserProvider.GetFollowers()).ToList();
        StateHasChanged();
    }
}
