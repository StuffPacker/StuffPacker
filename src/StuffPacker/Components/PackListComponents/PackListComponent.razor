@using StuffPacker.ViewModel
@using Microsoft.AspNetCore.Http;
@inject StuffPacker.Services.IPackListService _packListService;
@inject IHttpContextAccessor _httpContextAccessor;
<div class="container-fluid">
    <div class="row">
        <div class="col-sm-8">
            <h2>
                @if (ListEditMode)
                {
                <MatTextField @bind-Value="@Model.Name" HelperText="Listname" Label="Name" OnFocusOut="@SaveListName"></MatTextField>
                }
                else
                {
                @Model.Name
                <MatButton Icon="edit" Style="color:burlywood;" OnClick="@(e => EditList())" Label=""></MatButton>
                <MatButton Icon="remove_circle" Style="color:darkred;" OnClick="@(e => DeleteList())" Label=""></MatButton>
                }

            </h2>
            <b>Total weight: @Model.Weight @Model.WeightPrefix</b>
        </div>
        <div class="col-sm-4">
            <StuffPacker.Components.GraphComponents.ProductWeightComponent Groups="@Model.Items.ToList()" />
        </div>
    </div>
</div>    


        @foreach (var group in Model.Items)
        {
            <PackListGroupComponent Model="@group" ListModel="@Model" UserId="@GetUserId()" />           
        }
        <MatButton Icon="add_circle" Style="color:green;" OnClick="@AddGroup" Label="Add group"></MatButton>

       
        @code {
            [Parameter]
            public PackListViewModel Model { get; set; }
            string tempListName = "";
            bool ListEditMode = false;
            async Task AddGroup()
            {
                await _packListService.AddGroup(Model.Id, "New Group");
            }
            async Task AddGroupItem(Guid groupId)
            {
                await _packListService.AddGroupItem(Model.Id, groupId, "New Item", GetUserId());
            }
            async Task DeleteList()
            {
                await this._packListService.DeleteList(Model.Id);
            }
            async Task EditList()
            {
                tempListName = Model.Name;
                ListEditMode = true;
            }
            async Task SaveListName()
            {
                if (tempListName != Model.Name)
                {
                    await this._packListService.Update(Model);
                }
                ListEditMode = false;
            }
            private Guid GetUserId()
            {
                var userId = Guid.Parse(_httpContextAccessor.HttpContext.User.FindFirst(ClaimTypes.NameIdentifier).Value);
                return userId;
            }
        }