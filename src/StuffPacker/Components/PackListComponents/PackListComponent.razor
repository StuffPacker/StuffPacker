@using StuffPacker.ViewModel
@using Microsoft.AspNetCore.Http;

@inject StuffPacker.Services.IPackListService _packListService;
@inject IHttpContextAccessor _httpContextAccessor;
<div class="container-fluid">
    <div class="row">
        <div class="col-sm-6">
            @if (!PreviewMode)
            {
                if (Model.IsPublic)
                {
                    <MatButton Icon="visibility" Style="color:darkslategrey;" Label="Public"></MatButton>
                    if (showLink)
                    {
                        <div style="background-color:#eee;">
                            <MatButton Icon="keyboard_arrow_up" OnClick="@ShowLink" Style="color:black;"></MatButton><a style="color:darkgreen;" href="@packListUrl" target="_blank">This is your public link</a><MatButton Icon="highlight_off" OnClick="@RemovePublic" Style="color:darkred;"></MatButton>
                        </div>


                    }
                    else
                    {
                        <MatButton Icon="keyboard_arrow_down" OnClick="@ShowLink" Style="color:black;"></MatButton>
                    }

                }
                else
                {
                    <MatButton Icon="visibility_off" Style="color:black;" OnClick="@MakePublic" Label="Make public"></MatButton>
                }
            }
            <h2>
                @if (ListEditMode)
                {
                    <MatTextField @bind-Value="@Model.Name" HelperText="Listname" Label="Name"></MatTextField>
                }
                else
                {
                    @Model.Name
                    if (!PreviewMode)
                    {
                        <MatButton Icon="edit" Style="color:burlywood;" Class="sp-mdc-button" OnClick="@(e => EditList())" Label=""></MatButton>
                        <MatIconButton Icon="delete" Style="color:darkred;" Class="sp-mdc-button" OnClick="@((e) => {
                                                                        confirmModel.DialogIsOpen = true;
                                                                        confirmModel.Header = $"Are you sure you want to delete {Model.Name}?";
                                                                        confirmModel.OkButtonText = "Delete";
                                                                        confirmModel.OnOkClick = async () => await DeleteList();
                                                                    })"></MatIconButton>



                    }

                }

            </h2>
            @if (ListEditMode)
            {
                <div style="margin-top:10px;">
                    <MatBlazor.MatSelect Label="Prefix" @bind-Value="weightPrefixValue">
                        @foreach (var item in weightPrefix)
                        {
                            <MatBlazor.MatOption Value="@item" Id="@item"></MatBlazor.MatOption>
                        }
                    </MatBlazor.MatSelect><br />
                    <MatButton Icon="save" Style="color:green;" OnClick="@SaveList" Label="Save changes"></MatButton>
                </div>
            }
            else
            {
                <b>Total weight: @Model.WeightAndTokenShort</b>
            }

        </div>
        <div class="col-sm-3">
            <StuffPacker.Components.GraphComponents.ProductWeightComponent Groups="@Model.Items.ToList()" />
        </div>
        <div class="col-sm-3">
            <StuffPacker.Components.GraphComponents.ProductWeightComponent Groups="@GetTypesGraph(Model.Items.ToList())" />
        </div>
    </div>
</div>



@foreach (var group in Model.Items)
{
    <PackListGroupComponent Model="@group" PreviewMode="@PreviewMode" ListModel="@Model" UserId="@GetUserId()" Categories="@Categories"/>

}
@if (!PreviewMode)
{
    <MatButton Icon="add_circle" Style="color:green;" OnClick="@AddGroup" Label="Add group"></MatButton>
}


<StuffPacker.Components.BaseComponents.ConfirmComponent Model="confirmModel" />
@code {
    [Parameter]
    public PackListViewModel Model { get; set; }

    [Parameter]
    public bool PreviewMode { get; set; }
    [Parameter]
    public string[] Categories { get; set; }

    ConfirmComponentViewModel confirmModel = new ConfirmComponentViewModel();
    public string weightPrefixValue { get; set; }
    List<string> weightPrefix = new List<string>();
    string tempListName = "";
    bool ListEditMode = false;
    bool showLink = false;
    string packListUrl;

    protected override async Task OnInitializedAsync()
    {
        weightPrefixValue = Model.WeightPrefix.ToString();
        packListUrl = $"/packlistviewer/{Model.Id}";
    }

    List<PackListGroupViewModel> GetTypesGraph(List<PackListGroupViewModel> input)
    {
        var wearables = new List<ProductViewModel>();
        var consumables = new List<ProductViewModel>();
        var others = new List<ProductViewModel>();
        foreach (var item in input)
        {
            var tw = item.Items.Where(x => x.Wearable).ToList();
            if (tw.Any())
            {
                wearables.AddRange(tw);
            }
            var tc = item.Items.Where(x => x.Consumables).ToList();
            if (tc.Any())
            {
                consumables.AddRange(tc);
            }
            var to = item.Items.Where(x => x.Wearable == false && x.Consumables == false).ToList();
            if (to.Any())
            {
                others.AddRange(to);
            }

        }

        var list = new List<PackListGroupViewModel>();
        list.Add(new PackListGroupViewModel(Model.WeightPrefix) { Name = "Wearable", Items = wearables });
        list.Add(new PackListGroupViewModel(Model.WeightPrefix) { Name = "Consumables", Items = consumables });
        list.Add(new PackListGroupViewModel(Model.WeightPrefix) { Name = "Other", Items = others });

        return list;
    }

    Func<bool, Dictionary<string, object>> GetSelected = selected => selected ? new Dictionary<string, object>() { { "selected", true } } : null;

    void ShowLink()
    {
        showLink = !showLink;
    }

    async Task AddGroup()
    {
        await _packListService.AddGroup(Model.Id, "New Group");
    }
    async Task AddGroupItem(Guid groupId)
    {
        await _packListService.AddGroupItem(Model.Id, groupId, "New Item", GetUserId());
    }
    async Task<string> DeleteList()
    {
        await this._packListService.DeleteList(Model.Id);
        return string.Empty;
    }
    void EditList()
    {
        tempListName = Model.Name;
        weightPrefix = WeightPrefixHelper.GetWeightPrefix();
        ListEditMode = true;
    }
    async Task MakePublic()
    {
        Model.IsPublic = true;
        await this._packListService.Update(Model);

    }
    async Task RemovePublic()
    {
        Model.IsPublic = false;
        await this._packListService.Update(Model);

    }



    async Task SaveList()
    {
        if (weightPrefixValue == null)
        {
            weightPrefixValue = Model.WeightPrefix.ToString();
        }
        if (tempListName != Model.Name || weightPrefixValue != Model.WeightPrefix.ToString())
        {
            WeightPrefix enumValue = (WeightPrefix)Enum.Parse(typeof(WeightPrefix), weightPrefixValue, true);

            Model.WeightPrefix = enumValue;
            await this._packListService.Update(Model);
        }
        ListEditMode = false;
    }
    private Guid GetUserId()
    {
        //TODO Handle this nicer
        try
        {
            var u = _httpContextAccessor.HttpContext.User.FindFirst(ClaimTypes.NameIdentifier).Value;
            if (string.IsNullOrEmpty(u))
            {
                return Guid.Empty;
            }
            var userId = Guid.Parse(u);
            return userId;
        }
        catch (Exception)
        {

            return Guid.Empty;
        }

    }

}