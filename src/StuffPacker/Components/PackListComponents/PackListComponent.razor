@using StuffPacker.ViewModel
@using Microsoft.AspNetCore.Http;

@inject StuffPacker.Services.IPackListService _packListService;
@inject IHttpContextAccessor _httpContextAccessor;
<div class="container-fluid">
    <div class="row">
        <div class="col-sm-8">
            <h2>
                @if (ListEditMode)
                {
                    <MatTextField @bind-Value="@Model.Name" HelperText="Listname" Label="Name"></MatTextField>
                }
                else
                {
                    @Model.Name
                    if (!PreviewMode)
                    {
                        <MatButton Icon="edit" Style="color:burlywood;" OnClick="@(e => EditList())" Label=""></MatButton>
                        <MatButton Icon="remove_circle" Style="color:darkred;" OnClick="@(e => DeleteList())" Label=""></MatButton>
                    }

                }

            </h2>
            @if (ListEditMode)
            {
                <div style="margin-top:10px;">
                    <MatBlazor.MatSelect Label="Prefix" @bind-Value="weightPrefixValue">
                        @foreach (var item in weightPrefix)
                        {
                            <MatBlazor.MatOption @attributes="@(GetSelected(weightPrefixValue == item))" Id="@item">
                                @item
                            </MatBlazor.MatOption>
                        }
                    </MatBlazor.MatSelect><br />
                    <MatButton Icon="save" Style="color:green;" OnClick="@SaveList" Label="Save changes"></MatButton>
                </div>
            }
            else
            {
                <b>Total weight: @Model.WeightAndToken()</b>
            }

        </div>
        <div class="col-sm-4">
            <StuffPacker.Components.GraphComponents.ProductWeightComponent Groups="@Model.Items.ToList()" />
        </div>
    </div>
</div>


@foreach (var group in Model.Items)
{
    <PackListGroupComponent Model="@group" PreviewMode="@PreviewMode" ListModel="@Model" UserId="@GetUserId()" />

}
@if(!PreviewMode)
{
<MatButton Icon="add_circle" Style="color:green;" OnClick="@AddGroup" Label="Add group"></MatButton>
}



@code {
    [Parameter]
    public PackListViewModel Model { get; set; }

    [Parameter]
    public bool PreviewMode { get; set; }




    public string weightPrefixValue { get; set; }
    List<string> weightPrefix = new List<string>();
    string tempListName = "";
    bool ListEditMode = false;

    protected override async Task OnInitializedAsync()
    {
        weightPrefixValue = Model.WeightPrefix.ToString();
    }



    Func<bool, Dictionary<string, object>> GetSelected = selected => selected ? new Dictionary<string, object>() { { "selected", true } } : null;

    async Task AddGroup()
    {
        await _packListService.AddGroup(Model.Id, "New Group");
    }
    async Task AddGroupItem(Guid groupId)
    {
        await _packListService.AddGroupItem(Model.Id, groupId, "New Item", GetUserId());
    }
    async Task DeleteList()
    {
        await this._packListService.DeleteList(Model.Id);
    }
    async Task EditList()
    {
        tempListName = Model.Name;
        weightPrefix = WeightPrefixHelper.GetWeightPrefix();
        ListEditMode = true;
    }
    async Task SaveList()
    {
        if (weightPrefixValue == null)
        {
            weightPrefixValue = Model.WeightPrefix.ToString();
        }
        if (tempListName != Model.Name || weightPrefixValue != Model.WeightPrefix.ToString())
        {
            WeightPrefix enumValue = (WeightPrefix)Enum.Parse(typeof(WeightPrefix), weightPrefixValue, true);

            Model.WeightPrefix = enumValue;
            await this._packListService.Update(Model);
        }
        ListEditMode = false;
    }
    private Guid GetUserId()
    {
        //TODO Handle this nicer
        try
        {
            var u = _httpContextAccessor.HttpContext.User.FindFirst(ClaimTypes.NameIdentifier).Value;
            if(string.IsNullOrEmpty(u))
            {
                return Guid.Empty;
            }
            var userId = Guid.Parse(u);
            return userId;
        }
        catch (Exception)
        {

            return Guid.Empty;
        }

    }

}