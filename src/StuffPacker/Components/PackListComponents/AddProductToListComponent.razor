@inject StuffPacker.Services.IPackListService _packListService;


<MatButton Icon="add_circle" Style="color:green;" OnClick="@(e=> OpenAddProductDialog(GroupId))" Label="Add product"></MatButton>
<MatDialog @bind-IsOpen="@dialogAddProductIsOpen">
    <MatDialogContent>
        <div class="container-fluid">
            <div class="row">
                <div class="col">
                    <h2>Add product</h2>
                    <MatTextField @bind-Value="@addProductDialogName" Label="Name"></MatTextField><MatButton Icon="add_circle" Style="color:green;" OnClick="@AddNewProduct" Label="Add"></MatButton>
                    <br />
                    <hr />
                </div>
            </div>
            <div class="row">
                <div class="col-12">
                    <table class="table table-striped">
                        <thead>
                            <tr>
                                <th></th>
                                <th>
                                    Name<br /><input style="width:50px;" @bind-value="FilterName" @bind-value:event="oninput" />
                                </th>
                                <th>
                                    Wight<br />&nbsp;
                                </th>
                                <th>
                                    Category<br /><input style="width:50px;"  @bind-value="FilterCategory" @bind-value:event="oninput" />
                                </th>
                            </tr>
                        </thead>
                        @foreach (var item in FilteredList)
                        {
                            <tr>
                                <td> <MatCheckbox @bind-Checked="@item.Selected" Label=""></MatCheckbox></td>
                                <td>@item.Name</td>
                                <td>
                                    @item.WeightAndToken

                                </td>
                                <td>
                                    @item.Category
                                </td>
                            </tr>
                        }
                    </table>
                </div>
            </div>
        </div>
        
       
     
    </MatDialogContent>
    <MatDialogActions>
        <MatButton Style="color:black;" OnClick="@(e => { dialogAddProductIsOpen = false; })">Cancel</MatButton>
        <MatButton Style="color:green;" OnClick="@AddProductDialogOkClick">Add products</MatButton>
    </MatDialogActions>
</MatDialog>
@code {
    bool dialogAddProductIsOpen = false;
    string addProductDialogName = "";
    Guid dialogAddProductGroupId;

    [Parameter]
    public Guid GroupId { get; set; }

    [Parameter]
    public Guid UserId { get; set; }

    [Parameter]
    public Guid ListId { get; set; }

    List<AddProductListItemViewModel> dialogAddProductProducts = new List<AddProductListItemViewModel>();
    List<AddProductListItemViewModel> dialogAddProductProductsDefault = new List<AddProductListItemViewModel>();

    string FilterName { get; set; } = "";
    string FilterCategory { get; set; } = "";




    List<AddProductListItemViewModel> FilteredList => GetProductList();

    async Task OpenAddProductDialog(Guid groupId)
    {
        FilterName = string.Empty;
        FilterCategory = string.Empty;
        dialogAddProductGroupId = groupId;
        dialogAddProductProducts = (await this._packListService.GetAddableProducts(UserId)).ToList();
        dialogAddProductProductsDefault = dialogAddProductProducts;
        dialogAddProductIsOpen = true;
        addProductDialogName = "";
    }
    async Task AddProductDialogOkClick()
    {
        await _packListService.AddProducts(UserId, ListId, dialogAddProductGroupId, dialogAddProductProducts);
        dialogAddProductIsOpen = false;
    }
    async Task AddNewProduct()
    {
        dialogAddProductProducts.Add(new AddProductListItemViewModel(Guid.NewGuid(),addProductDialogName,true,true,0,WeightPrefix.Gram,string.Empty));
        addProductDialogName = "";
    }
    private List<AddProductListItemViewModel>    GetProductList()
    {
        var list = dialogAddProductProducts;

        if (!string.IsNullOrEmpty(FilterName))
        {
            list = list.Where(x => x.Name.ToLower().Contains(FilterName.ToLower())).ToList();
        }
         if (!string.IsNullOrEmpty(FilterCategory))
        {
            list = list.Where(x => x.Category.ToLower().Contains(FilterCategory.ToLower())).ToList();
        }

        return list;
    }
}
