@inject StuffPacker.Services.IPackListService _packListService;

@if (Maximized)
{
    <b style="font-size:large">
        <MatButton Icon="keyboard_arrow_up" Style="color:black;" OnClick="@ExpandColaps" Label=""></MatButton>
        @if (GroupEditMode)
        {
            <MatTextField @bind-Value="@Model.Name" HelperText="Groupname" Label="Name" OnFocusOut="@(e=> SaveGroupName(Model.Id))"></MatTextField>
        }
        else
        {
            @Model.Name
            if (!PreviewMode)
            {
                <MatButton Icon="edit" Style="color:burlywood;" Class="sp-mdc-button" OnClick="@(e=> EditGroup(Model.Id))" Label=""></MatButton>
            }

        }
    </b>
    <span style="font-size:small;"><b>: Total weight:  @Model.WeightAndToken</b></span>
    <table class="table table-striped">
        <thead class="thead-dark">
            <tr>
                <th>Name</th>
                <th>Amount</th>
                <th>Weight</th>
                <th></th>
            </tr>
        </thead>
        @foreach (var item in Model.Items)
        {
            <tr>
                <td>@item.Name</td>
                <th>@item.Amount</th>
                <td>
                    @item.WeightAndToken
                </td>
                <td>
                    @if (!PreviewMode)
                    {
                        <MatButton Icon="edit" Style="color:burlywood;" Class="sp-mdc-button" OnClick="@(e => EditGroupItem(Model.Id, item.Id))" Label=""></MatButton>
                        <MatButton Icon="remove_circle" Style="color:darkred;" Class="sp-mdc-button" OnClick="@(e => DeleteGroupItem(Model.Id, item.Id))" Label=""></MatButton>
                    }

                </td>
            </tr>
        }
        @if (!PreviewMode)
        {
            <tr>
                <td colspan="4">
                    <AddProductToListComponent GroupId="@Model.Id" UserId="@UserId" ListId="@ListModel.Id" />
                </td>
            </tr>
        }

    </table>
}
else
{
<div style="background-color:#eee; border:solid 1px #ccc; padding:3px;">
    <b style="font-size:large">
        <MatButton Icon="keyboard_arrow_down" Style="color:black;" OnClick="@ExpandColaps" Label=""></MatButton>
        @Model.Name        
    </b>
    <span style="font-size:small;"><b>: Total weight:  @Model.WeightAndToken</b></span>
</div>
   
}
@if(!PreviewMode)
{
    <ProductUpdateComponent Model="productUpdateComponentViewModel" WeightPrefixes="weightPrefix" />
}




@code {


    [Parameter]
    public PackListGroupViewModel Model { get; set; }

    [Parameter]
    public PackListViewModel ListModel { get; set; }

    [Parameter]
    public Guid UserId { get; set; }

    [Parameter]
    public bool PreviewMode { get; set; }

    ProductUpdateComponentViewModel productUpdateComponentViewModel = new ProductUpdateComponentViewModel();

  

    string tempGroupName = "";
    bool GroupEditMode = false;
    bool Maximized = true;
    List<string> weightPrefix = new List<string>();

    protected override async Task OnInitializedAsync()
    {
        weightPrefix = WeightPrefixHelper.GetWeightPrefix();
    }

   
    


    async Task EditGroup(Guid groupId)
    {
        var group = ListModel.Items.First(x => x.Id == groupId);
        tempGroupName = group.Name;
        GroupEditMode = true;
    }
    async Task EditGroupItem(Guid groupId, Guid productId)
    {
        var model = ListModel.Items.First(x => x.Id == groupId);
        var product = model.Items.First(x => x.Id == productId);
        productUpdateComponentViewModel.EditMode = true;
        productUpdateComponentViewModel.ConvertedWeight=product.ConvertedWeight;
        productUpdateComponentViewModel.WeightPrefixValue = product.WeightPrefix.ToString();
        productUpdateComponentViewModel.ProductModel = product;
        productUpdateComponentViewModel.DialogIsOpen = true;
    }
    async Task DeleteGroupItem(Guid groupId, Guid productId)
    {
        await this._packListService.DeleteProduct(ListModel.Id, groupId, productId);

    }
    async Task SaveGroupName(Guid groupId)
    {
        var group = ListModel.Items.First(x => x.Id == groupId);

        if (tempGroupName != group.Name)
        {
            await this._packListService.UpdateGroup(ListModel.Id, group);
        }
        GroupEditMode = false;
    }

    void ExpandColaps()
    {
        Maximized = !Maximized;
    }
}
