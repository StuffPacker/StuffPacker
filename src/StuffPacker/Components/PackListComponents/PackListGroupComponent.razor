@inject StuffPacker.Services.IPackListService _packListService;

@if (Maximized)
{
    <b style="font-size:large">
        <MatButton Icon="keyboard_arrow_up" Style="color:black;" OnClick="@ExpandColaps" Label=""></MatButton>
        @if (GroupEditMode)
        {
            <MatTextField @bind-Value="@Model.Name" HelperText="Groupname" Label="Name" OnFocusOut="@(e=> SaveGroupName(Model.Id))"></MatTextField>
        }
        else
        {
            @Model.Name
            if (!PreviewMode)
            {
                <MatButton Icon="edit" Style="color:burlywood;" Class="sp-mdc-button" OnClick="@(e=> EditGroup(Model.Id))" Label=""></MatButton>
                <MatButton Icon="delete" Style="color:darkred;" Class="sp-mdc-button" OnClick="@((e) => {
                                                                        confirmModel.DialogIsOpen = true;
                                                                        confirmModel.Header = $"Are you sure you want to delete {Model.Name}?";
                                                                        confirmModel.OkButtonText = "Delete";
                                                                        confirmModel.OnOkClick = async () => await DeleteGroup();
                                                                    })"></MatButton>
            }

        }
    </b>
    <span style="font-size:small;"><b>: Total weight:  @Model.WeightAndTokenShort</b></span>
    <table class="table table-striped">
        <thead class="thead-dark">
            <tr>
                <th>Name</th>
                <th>Amount</th>
                <th>Weight</th>
                <th>Info</th>
                <th></th>
            </tr>
        </thead>
        @foreach (var item in Model.Items)
        {
            <tr>
                <td>                 
                   
                        @item.Name                  

                </td>
                <th>@item.Amount</th>
                <td>
                    @item.WeightAndTokenShort
                </td>
                <td>
                    @if (item.Star)
                    {
                        <MatIcon Class=".sp-mdc-button" Style="color:#ff6a00;" Attributes="@(new Dictionary<string, object>() { {"title","Favorite" } })"  Icon="star"></MatIcon>
                    }
                    @if (item.Wearable)
                    {
                        <MatIcon Class=".sp-mdc-button" Style="color:darkgreen;" Attributes="@(new Dictionary<string, object>() { {"title","Wearable" } })" Icon="accessibility_new"></MatIcon>
                    }
                    @if (item.Consumables)
                    {
                        <MatIcon Class=".sp-mdc-button" Style="color:darkgreen;" Attributes="@(new Dictionary<string, object>() { {"title","Consumables" } })" Icon="fastfood"></MatIcon>
                    }
                </td>
                <td>
                    @if (!PreviewMode)
                    {

                        <MatButton Icon="edit" Style="color:burlywood;" Class="sp-mdc-button" OnClick="@(e => EditGroupItem(Model.Id, item.Id))" Label=""></MatButton>
                        <MatButton Icon="remove_circle" Style="color:darkred;" Class="sp-mdc-button" OnClick="@(e => DeleteGroupItem(Model.Id, item.Id))" Label=""></MatButton>
                    }

                </td>
            </tr>
        }
        @if (!PreviewMode)
        {
            <tr>
                <td colspan="4">
                    <AddProductToListComponent GroupId="@Model.Id" UserId="@UserId" ListId="@ListModel.Id" />
                </td>
            </tr>
        }

    </table>
}
else
{
<div style="background-color:#eee; border:solid 1px #ccc; padding:3px;">
    <b style="font-size:large">
        <MatButton Icon="keyboard_arrow_down" Style="color:black;" OnClick="@ExpandColaps" Label=""></MatButton>
        @Model.Name        
    </b>
    <span style="font-size:small;"><b>: Total weight:  @Model.WeightAndTokenShort</b></span>
</div>
   
}
@if(!PreviewMode)
{
    <ProductUpdateComponent Model="productUpdateComponentViewModel" WeightPrefixes="weightPrefix" />
}
<StuffPacker.Components.BaseComponents.ConfirmComponent Model="confirmModel" />



@code {


    [Parameter]
    public PackListGroupViewModel Model { get; set; }

    [Parameter]
    public PackListViewModel ListModel { get; set; }

    [Parameter]
    public Guid UserId { get; set; }

    [Parameter]
    public bool PreviewMode { get; set; }

    ProductUpdateComponentViewModel productUpdateComponentViewModel = new ProductUpdateComponentViewModel();
    ConfirmComponentViewModel confirmModel = new ConfirmComponentViewModel();


    string tempGroupName = "";
    bool GroupEditMode = false;
    bool Maximized = true;
    List<string> weightPrefix = new List<string>();

    protected override async Task OnInitializedAsync()
    {
        weightPrefix = WeightPrefixHelper.GetWeightPrefix();
    }





    void EditGroup(Guid groupId)
    {
        var group = ListModel.Items.First(x => x.Id == groupId);
        tempGroupName = group.Name;
        GroupEditMode = true;
    }
 void EditGroupItem(Guid groupId, Guid productId)
    {
        var model = ListModel.Items.First(x => x.Id == groupId);
        var product = model.Items.First(x => x.Id == productId);
        productUpdateComponentViewModel.EditMode = true;
        productUpdateComponentViewModel.ConvertedWeight=product.ConvertedWeight;
        productUpdateComponentViewModel.WeightPrefixValue = product.WeightPrefix.ToString();
        productUpdateComponentViewModel.ProductModel = product;
        productUpdateComponentViewModel.DialogIsOpen = true;
    }
    async Task DeleteGroupItem(Guid groupId, Guid productId)
    {
        await this._packListService.DeleteProduct(ListModel.Id, groupId, productId);

    }
    async Task SaveGroupName(Guid groupId)
    {
        var group = ListModel.Items.First(x => x.Id == groupId);

        if (tempGroupName != group.Name)
        {
            await this._packListService.UpdateGroup(ListModel.Id, group);
        }
        GroupEditMode = false;
    }

    void ExpandColaps()
    {
        Maximized = !Maximized;
    }
    async Task<string> DeleteGroup()
    {
        await this._packListService.DeleteGroup(ListModel.Id,Model.Id);

        return string.Empty;
    }
}
