@using Model

@inject StuffPacker.Services.IPackListService _packListService;
@inject ICdnHelper _cdnHelper 
<MatDialog @bind-IsOpen="@Model.DialogIsOpen">
    <MatDialogTitle>Update product</MatDialogTitle>
    <MatDialogContent>
        <MatTextField @bind-Value="@Model.ProductModel.Name" Label="Name"></MatTextField>
        <br />
        @if (Model.ProductModel.Star)
        {
            <MatIconButton Class=".sp-mdc-button" Attributes="@(new Dictionary<string, object>() { {"title","Favorite" } })" OnClick="@ChangeStar" Style="color:#ff6a00; font-size:x-small;" Icon="star_rate"></MatIconButton>
        }
        else
        {
            <MatIconButton Class=".sp-mdc-button" Attributes="@(new Dictionary<string, object>() { {"title","Favorite" } })" OnClick="@ChangeStar" Style="color:dimgray; font-size:x-small;" Icon="star_rate"></MatIconButton>
        }
        @if (Model.ProductModel.Wearable)
        {
            <MatIconButton Class=".sp-mdc-button" Attributes="@(new Dictionary<string, object>() { {"title","Wearable" } })" OnClick="@ChangeWearable" Style="color:darkgreen; font-size:x-small;" Icon="accessibility_new"></MatIconButton>
        }
        else
        {
            <MatIconButton Class=".sp-mdc-button" Attributes="@(new Dictionary<string, object>() { {"title","Wearable" } })" OnClick="@ChangeWearable" Style="color:dimgray; font-size:x-small;" Icon="accessibility_new"></MatIconButton>
        }
        @if (Model.ProductModel.Consumables)
        {
            <MatIconButton Class=".sp-mdc-button" Attributes="@(new Dictionary<string, object>() { {"title","Consumables" } })" OnClick="@ChangeConsumables" Style="color:darkgreen; font-size:x-small;" Icon="fastfood"></MatIconButton>
        }
        else
        {
            <MatIconButton Class=".sp-mdc-button" Attributes="@(new Dictionary<string, object>() { {"title","Consumables" } })" OnClick="@ChangeConsumables" Style="color:dimgray; font-size:x-small;" Icon="fastfood"></MatIconButton>
        }
        <br />
        <div class="container-fluid" style="padding:0px;">
            <div class="row .no-gutters">
                <div class="col">
                    <MatTextField @bind-Value="@Model.ConvertedWeight" Label="Weight" Style="width:100px;"></MatTextField>
                </div>
                <div class="col">
                    <MatSelect Label="Prefix" @bind-Value="Model.WeightPrefixValue">
                        @foreach (var item in WeightPrefixes)
                        {
                            <MatOptionString Id="@item">@item</MatOptionString>
                        }
                    </MatSelect>
                </div>
            </div>
        </div>
        <br />
        <input type="text" @bind-value="@Model.ProductModel.Description"> </input>
        <MatTextField @bind-Value="@Model.ProductModel.Category" Label="Category"></MatTextField><br />

        <h3>Images</h3>
        <StuffPacker.Components.BaseComponents.FileUploadComponent FileUploadType="Enums.FileUploadType.ProductImg" AfterUpload="AfterUpload" AllowMultipleFiles="true"></StuffPacker.Components.BaseComponents.FileUploadComponent>


        @if (Model.ProductModel.Images != null)
        {
            <div class="container-fluid">
                @foreach (var item in Model.ProductModel.Images)
                {
                    <div class="row">
                        <div class="col">
                            <a href="@item.Url" target="_blank">
                                <img style="width:100%" src="@item.Url" />
                            </a>
                        </div>
                    </div>

                }
            </div>

        }
        <br />
        <br />
        @*<MatAutocompleteList Items="@Categories" TItem="string" @bind-Value="@Model.ProductModel.Category" Label="Category"></MatAutocompleteList>
        <br />*@

    </MatDialogContent>
    <MatDialogActions>
        <MatButton OnClick="@(e => { Model.DialogIsOpen = false; })">Cancel</MatButton>
        <MatButton OnClick="@OkClick">Save</MatButton>
    </MatDialogActions>
</MatDialog>
@code {
    [Parameter]
    public ProductUpdateComponentViewModel Model { get; set; }

    [Parameter]
    public List<string> WeightPrefixes { get; set; }

    [Parameter] public EventCallback<string> OnAfterOkClick { get; set; }

    [Parameter]
    public string[] Categories { get; set; }

    Func<bool, Dictionary<string, object>> GetSelected = selected => selected ? new Dictionary<string, object>() { { "selected", true } } : null;

    void ChangeStar()
    {
        Model.ProductModel.Star = !Model.ProductModel.Star;
    }
    void ChangeWearable()
    {
        Model.ProductModel.Wearable = !Model.ProductModel.Wearable;
    }
    void ChangeConsumables()
    {
        Model.ProductModel.Consumables = !Model.ProductModel.Consumables;
    }

    void AfterUpload(UploadFileModel[] uploadedFiles)
    {

        foreach (var item in uploadedFiles)
        {
            Model.ProductModel.Images.Add(new ViewModel.Base.ImageViewModel
            {
                Url = _cdnHelper.GetPath(Enums.CdnFileType.ProductImage, item.FileName),
                Id = item.Id,
                FileName=item.FileName
            });
        }
    }

    async Task OkClick()
    {
        var id = Guid.NewGuid();
        if (Model.EditMode)
        {
            id = Model.ProductModel.Id;
        }
        if(string.IsNullOrEmpty(Model.WeightPrefixValue))
        {
            Model.WeightPrefixValue = WeightPrefix.Gram.ToString();
        }
        WeightPrefix enumValue = (WeightPrefix)Enum.Parse(typeof(WeightPrefix), Model.WeightPrefixValue, true);
        Model.ProductModel.WeightPrefix = enumValue;
        Model.ProductModel.Weight = Convert.ToDecimal(Model.ConvertedWeight);
        Model.ProductModel.Id = id;
        await this._packListService.UpdateProduct(Model.ProductModel);
        Model.DialogIsOpen = false;
        await OnAfterOkClick.InvokeAsync("");


    }
}
